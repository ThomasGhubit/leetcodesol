class Solution {
    public int maxProfit(int[] prices) {
        if (prices.length == 0) return 0;
        int[] dp = new int[prices.length];
        for (int k = 1; k <= 2; k++) {
            int min = prices[0], last = 0;
            for (int i = 1; i < prices.length; i++) {
                min = Math.min(min, prices[i] - last);
                last = dp[i];
                dp[i] = Math.max(dp[i-1],  prices[i] - min);
            }
        }
        return dp[prices.length - 1];
        // int num = prices.length;
        // if (num < 2) return 0;
        // int hold1 = Integer.MIN_VALUE, hold2 = Integer.MIN_VALUE;
        // int release1 = 0, release2 = 0;
        // for(int i:prices){                              // Assume we only have 0 money at first
        //     release2 = Math.max(release2, hold2+i);     // The maximum if we've just sold 2nd stock so far.
        //     hold2    = Math.max(hold2,    release1-i);  // The maximum if we've just buy  2nd stock so far.
        //     release1 = Math.max(release1, hold1+i);     // The maximum if we've just sold 1nd stock so far.
        //     hold1    = Math.max(hold1,    -i);          // The maximum if we've just buy  1st stock so far. 
        // }
        // return release2;
    }
}
