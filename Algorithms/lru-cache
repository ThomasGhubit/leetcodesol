class Node {
    Node pre, next;
    int key, value;

    public Node(int key, int value) {
	    this.key = key;
        this.value = value;
    }
}

public class LRUCache {
    int count = 0, capacity = 0;
    Node head, tail;
    Map<Integer, Node> map;
    
    public LRUCache(int capacity) {
	    map = new HashMap<Integer, Node>();
        head = new Node(0, 0);
        tail = new Node(0, 0);
        head.next = tail;
        tail.pre = head;
        head.pre = null;
        tail.next = null;
        this.capacity = capacity;
        this.count = 0;
    }

    public void deleteNode(Node node) {
	    node.next.pre = node.pre;
        node.pre.next = node.next;
    }

    public void addToHead(Node node) {
        node.next = head.next;
        node.pre = head;
        head.next = node;
        node.next.pre = node;
    }

    public int get(int key) {
	    if (map.containsKey(key)) {
            Node node = map.get(key);
            deleteNode(node);
            addToHead(node);
            return map.get(key).value;
        }
        return -1;
    }

    public void put(int key, int value) {
    	if (map.containsKey(key)) {
            Node node = map.get(key);
            deleteNode(node);
            Node node_ = new Node(key, value);
            addToHead(node_);
            map.put(key, node_);
        }
        else {
            Node node = new Node(key, value);
            map.put(key, node);
            if (count < capacity) {
                addToHead(node);
                count++;
            }
            else {
                map.remove(tail.pre.key);
                deleteNode(tail.pre);
                addToHead(node);
            }
        }
    }
}

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */
