import java.util.concurrent.Semaphore;

class ZeroEvenOdd {
    private int n;
    Semaphore zeroS, evenS, oddS;
    
    public ZeroEvenOdd(int n) {
        this.n = n;
        zeroS = new Semaphore(1);
        evenS = new Semaphore(0);
        oddS = new Semaphore(0);
    }

    // printNumber.accept(x) outputs "x", where x is an integer.
    public void zero(IntConsumer printNumber) throws InterruptedException {
        
        for(int i=1; i <= n; i++) {
            zeroS.acquire();
            printNumber.accept(0);
            
            if(i%2 == 1) { // release odd print semaphore
                oddS.release();
            } else { // release even print semaphore
                evenS.release();   
            }
        }    
    }

    public void even(IntConsumer printNumber) throws InterruptedException {
        
        for(int i=2; i <= n; i+=2) {
            evenS.acquire();
            printNumber.accept(i);
            zeroS.release();
        }
    }

    public void odd(IntConsumer printNumber) throws InterruptedException {
        
        for(int i=1; i <= n; i+=2) {
            oddS.acquire();
            printNumber.accept(i);
            zeroS.release();
        }
    }
}
