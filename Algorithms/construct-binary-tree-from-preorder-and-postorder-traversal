/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
//     int[] pre, post;
//     public TreeNode constructFromPrePost(int[] pre, int[] post) {
//         this.pre = pre;
//         this.post = post;
//         return make(0, 0, pre.length);
//     }

//     public TreeNode make(int i0, int i1, int N) {
//         if (N == 0) return null;
//         TreeNode root = new TreeNode(pre[i0]);
//         if (N == 1) return root;

//         int L = 1;
//         for (; L < N; ++L)
//             if (post[i1 + L - 1] == pre[i0 + 1])
//                 break;

//         root.left = make(i0 + 1, i1, L);
//         root.right = make(i0 + L + 1, i1 + L, N - 1 - L);
//         return root;
//     }
    public TreeNode constructFromPrePost(int[] pre, int[] post) {
        Deque<TreeNode> s = new ArrayDeque<>();
        s.offer(new TreeNode(pre[0]));
        for (int i = 1, j = 0; i < pre.length; ++i) {
            TreeNode node = new TreeNode(pre[i]);
            while (s.getLast().val == post[j]) {
                s.pollLast(); j++;
            }
            if (s.getLast().left == null) s.getLast().left = node;
            else s.getLast().right = node;
            s.offer(node);
        }
        return s.getFirst();
    }
}
