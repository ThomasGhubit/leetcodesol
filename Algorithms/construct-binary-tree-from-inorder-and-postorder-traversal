/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public TreeNode buildTree(int[] inorder, int[] postorder) {
        if (inorder == null || postorder == null || inorder.length != postorder.length) return null;
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < inorder.length; i++) map.put(inorder[i], i);
        return build(inorder, 0, inorder.length - 1, postorder, 0, postorder.length - 1, map);
    }
    
    private TreeNode build(int[] inorder, int is, int ie, int[] postorder, int ps, int pe, Map<Integer, Integer> map) {
        if (is > ie || ps > pe) return null;
        int val = postorder[pe];
        int index = map.get(val);
        TreeNode root = new TreeNode(val);
        root.left = build(inorder, is, index - 1, postorder, ps, ps + index - is - 1, map);
        root.right = build(inorder, index + 1, ie, postorder, ps + index - is, pe - 1, map);
        return root;
    }
}


// private TreeNode buildTreePostIn(int[] inorder, int is, int ie, int[] postorder, int ps, int pe, 
//                                  HashMap<Integer,Integer> hm){
// 	if (ps>pe || is>ie) return null;
// 	TreeNode root = new TreeNode(postorder[pe]);
// 	int ri = hm.get(postorder[pe]);
// 	TreeNode leftchild = buildTreePostIn(inorder, is, ri-1, postorder, ps, ps+ri-is-1, hm);
// 	TreeNode rightchild = buildTreePostIn(inorder,ri+1, ie, postorder, ps+ri-is, pe-1, hm);
// 	root.left = leftchild;
// 	root.right = rightchild;
// 	return root;
// }
